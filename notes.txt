------------------------- DOCKERFILE -------------------------
# pulling base image from dockerhub if not already saved locally (you can configure to pull from JPL registry too)
FROM python:2.7

BREAK (RUN HERE TO HAVE JUST A CONTAINER WITH PYTHON)

# Create new directory and cd into it
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# becuase we pulled from python base image, we can run pip to install the requirements
COPY requirements.txt /usr/src/app/
RUN pip install -r requirements.txt

# set environment variable
ENV FLASK_APP=app.py

# copy the apps content into our application and run it
COPY ./app.py /usr/src/app
CMD ["python", "app.py"]


------------------------- DOCKER COMMANDS TO USE -------------------------
docker build -t tpt-app .
docker run -it -p 5000:5000 tpt-app:latest
docker images
docker ps
docker login registry.jpl.nasa.gov
docker tag <image> username/repository:tag
docker push username/repository:tag



------------------------- MANIFESTS/TPT-NS.YML -------------------------
apiVersion: v1
# the "kind" just explains the resource youre building, in this case, the namespace
kind: Namespace
# The metadata here just stores the name of the namespace
metadata:
  name: tpt-app

------------------------- MANIFESTS/TPT-DEPLOY.YAML -------------------------
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    run: tpt-app
  name: tpt-app
  namespace: tpt-app
spec:
# List the number of replicas you want of this pod
  replicas: 1
  selector:
    matchLabels:
      run: tpt-app
# We want rollingUpdates as the update strategy
  strategy:
    rollingUpdate:
      # These settings for the rollingupdate list the maxunavailable/maxextra number of pods during a rollingupdate. These can be absolute numbers (e.g. 1) or relative percents (e.g. 25%) which are rounded down
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: tpt-app
    spec:
      containers:
      # This is where you would include env variables, and also where you indicate where to pull the image from
      - image: registry.jpl.nasa.gov/<NAME>
        # This setting determines when you should pull the image (Always, IfNotPresent, Never)
        imagePullPolicy: Always
        name: tpt-app
        # Indicate the container port for the pods
        ports:
        - containerPort: 8080
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        # Best practice is to include a resource limit (so pods cannot overuse compute resources)
        resources:
          limits:
            cpu: 200m
            memory: 2Gi
          requests:
            cpu: 200m
            memory: 2Gi
      dnsPolicy: ClusterFirst
      # This setting pulls secrets from your kubernetes secret in order to provide credentials for the registry
      imagePullSecrets:
      - name: <USERNAME>-pull-secret
      # always restart when pod goes down
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30


------------------------- MANIFESTS/TPT-SVC.YAML -------------------------
apiVersion: v1
# need to define the kind of resource you'd like
kind: Service
metadata:
  labels:
    run: tpt-app
  name: tpt-app
  namespace: tpt-app
spec:
  ports:
  - protocol: TCP
  	# this is the service port that is open (that the ingress will use)
    port: 443
    # This is the container port that the svc is connected to.
    targetPort: 5000
  selector:
    run: tpt-app
  sessionAffinity: None
  type: ClusterIP
status:
  loadBalancer: {}

------------------------- MANIFESTS/TPT-ING.YAML -------------------------
apiVersion: extensions/v1beta1
kind: Ingress  
metadata:
  name: tpt-app
  namespace: tpt-app
spec:
  rules:
  - http:
      paths:
      - backend:
      # Indicate which service/port to connect to
          serviceName: tpt-app
          servicePort: 443
        path: /
status:
  loadBalancer: {}


------------------------- MANIFESTS/<USER>-secret.YAML -------------------------
Go to the registry and download the file they have as your secret. You can find this file by going to user settings, then click generate encrypted password, and then finally copy the kubernetes key secret.


------------------------- KUBERNETES COMMANDS TO USE -------------------------
Kubectl config set-context minikube â€“namespace=tpt-app



